"use strict";
// Object.defineProperty(exports, "__esModule", { value: true });
/**
 * Record audio from MediaStream into raw AudioBuffer
 */
var RawMediaRecorder = /** @class */ (function () {
    function RawMediaRecorder(audioContext, bufferSize) {
        if (bufferSize === void 0) { bufferSize = 4096; }
        this.ctx = audioContext;
        this.bufferSize = bufferSize;
        this.onstart = function () { return console.log("recording started"); };
        this.onstop = function () { return console.log("recording stoped"); };
        this.ondata = function (data) { return console.log("data available"); };
        this.buffers = [];
    }
    /** Start recording */
    RawMediaRecorder.prototype.start = function () {
        var _this = this;
        this.ctx
            .resume()
            .then(function () {
            return navigator.mediaDevices.getUserMedia({ audio: true, video: false });
        })
            .then(function (stream) { return _this.startStream(stream); })
            .catch(function (err) { return console.error(err); });
    };
    RawMediaRecorder.prototype.startStream = function (stream) {
        var _this = this;
        var source = this.ctx.createMediaStreamSource(stream);
        var analyser = this.ctx.createAnalyser();
        var script = this.ctx.createScriptProcessor(this.bufferSize, 1, 1);
        script.onaudioprocess = function (ev) {
            _this.buffers.push(ev.inputBuffer.getChannelData(0).slice());
        };
        source.connect(analyser);
        analyser.connect(script);
        script.connect(this.ctx.destination);
        this.stream = stream;
        this.source = source;
        this.analyser = analyser;
        this.script = script;
        this.onstart();
    };
    /** Stop recording */
    RawMediaRecorder.prototype.stop = function (dataCallback) {
        var _this = this;
        this.stream.getTracks().forEach(function (track) { return track.stop(); });
        this.source.disconnect();
        this.analyser.disconnect();
        this.script.disconnect();
        var buffers = this.buffers;
        this.buffers = [];
        this.stream = null;
        this.source = null;
        this.analyser = null;
        this.script = null;
        this.onstop();
        setTimeout(function () { return _this.exportData(buffers, dataCallback || _this.ondata); }, 100);
    };
    /** Cancel recording, onstop will be called but not ondata */
    RawMediaRecorder.prototype.cancel = function () {
        this.stop(function () {
            /* noop */
        });
    };
    RawMediaRecorder.prototype.exportData = function (buffers, callback) {
        var totalLength = buffers.reduce(function (acc, buffer) { return acc + buffer.length; }, 0);
        var audioBuffer = this.ctx.createBuffer(1, totalLength, this.ctx.sampleRate);
        var outChannel = audioBuffer.getChannelData(0);
        var offset = 0;
        for (var _i = 0, buffers_1 = buffers; _i < buffers_1.length; _i++) {
            var buffer = buffers_1[_i];
            outChannel.set(buffer, offset);
            offset += buffer.length;
        }
        callback(audioBuffer);
    };
    return RawMediaRecorder;
}());
// exports.default = RawMediaRecorder;
